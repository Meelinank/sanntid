name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    # Install OpenCV
    - name: Install OpenCV
      run: |
        git clone https://github.com/opencv/opencv.git
        cd opencv
        git checkout 4.0.0
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ..
        cmake --build . --config Release
      if: matrix.os == 'ubuntu-latest'

    - name: Install OpenCV (Windows)
      run: |
        git clone https://github.com/opencv/opencv.git
        cd opencv
        git checkout 4.0.0
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ..
        cmake --build . --config Release
      if: matrix.os == 'windows-latest'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Download and install Boost
      id: install-boost
      uses: MarkusJx/install-boost@v2.4.4
      with:
        boost_version: 1.82.0

    # Install nlohmann_json
    - name: Install nlohmann_json
      run: |
        git clone https://github.com/nlohmann/json.git
        cd json
        cmake -B build
        cmake --build build --target install
      shell: bash
      if: matrix.os == 'ubuntu-latest'

    - name: Install nlohmann_json (Windows)
      run: |
        git clone https://github.com/nlohmann/json.git
        cd json
        cmake -B build -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/nlohmann_json
        cmake --build build --target install
      shell: cmd
      if: matrix.os == 'windows-latest'

    # Install OpenCV globally
    - name: Install OpenCV (Linux)
      run: sudo make install
      working-directory: opencv/build
      if: matrix.os == 'ubuntu-latest'

    # Install OpenCV on Windows
    - name: Install OpenCV (Windows)
      run: cmake --build . --target INSTALL --config Release
      working-directory: opencv/build
      if: matrix.os == 'windows-latest'

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
